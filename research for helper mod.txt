8017d358 - branch to isEnd_FrameCounter - update__Q23app16HIDErrorMenuImplFv
openIfNecessary__Q23app16HIDErrorMenuImplFb 	src.a HIDErrorMenu.o - problem function
8017da2c -> 8017dcb8  put a branch that prevents hid error menu (4800028c)
804ee370 -> isLogoutForce_Q43scn4step4hero16LogoutControllerCFv

805d3f84 -> updateFrame_Q43
805d3d8c -> playerNum constructor, has same first argument as updateFrame_PlayerNum
-loads whole string into stack, sends it into lyt pane being generated
strings use utf-16 apparently


				--Input--
gameWR -> second arg of ct_Q23hid11SimpleWRHIDFRCQ23hid11SimpleWRHID
hid11SimpleWRHID is 368 bytes long

PADRead(int*) = reads pad into array of 16 uints
PADClamp(int*) = presumably clamps nunchuck stick

prevUpdateData copied into sp + 960
sp + 1016 is KPADStatus
1016 - 960 = 56
therefore KPADStatus object is 56 bytes into a hid11SimpleWRHID object
first byte of hid11SimpleWRHID is a boolean that decides whether or not the wiimote is activated (the game will refuse to read inputs if it's 0)

Create__Q53scn4step9carryitem11abilitystar9ModelDescFUl - first argument is the texture id that corresponds to the ability star's texture
0x8 of modeldesc struct is pointer to path string that gives thing texture
8035116c - keep an eye on r6 (model desc struct)
	- turns into r31
	the model gets fetched by memory and binded to the base nw4r file using __ct__Q43scn4step5chara5ModelFRQ33scn4step9ComponentRQ23mem10IAllocatorRCQ43scn4step5chara9ModelDescRCQ24gobj8LocationRCQ24gobj6TargetQ43scn4step6effect12DrawPriority()
	__ct__Q43scn4step5chara5ModelFRQ33scn4step9ComponentRQ23mem10IAllocatorRCQ43scn4step5chara9ModelDescRCQ24gobj8LocationRCQ24gobj6TargetQ43scn4step6effect12DrawPriority(file** bindedFile, file** toBind, int unknown)
	registerResFile__Q24gobj4AnimFUlRCQ23g3d15ResFileAccessor(modeldesc*, unknown_int, file** bindedFile)
		now that both files are bound and registered, you can access the animations from any of the binded files
		the ability stars use a texture animation to change the texture
		

Investigating the CreateHero functions
void checkMainAndCreateHero(uint32_t *hidPtr) //function assumes player 1
{
	uint32_t* heroPtr = (uint32_t*)*hidPtr;
	uint32_t* heroManager = heroManager__Q33scn4step9ComponentFv(*(uint32_t**)heroPtr);
	uint32_t curNum = heroManager[39];
	uint32_t individHero[20]; // research seems to imply individHero is 64 bytes but im not taking any chances
	if ((hidPtr[1] & HID_BUTTON_B) && (curNum > 4))
	{
		vec2_t* location = location__Q43scn4step4hero4HeroCFv(hero);
		CreateDefault__Q33scn4step17ContextHeroIndiviFv(individHero);
		individHero[1] = 0x03 + curNum;
		createHero__Q43scn4step4hero7ManagerFUlRCQ33hel4math7Vector2RCQ33hel4math7Vector2bRCQ33scn4step17ContextHeroIndiviQ43scn4step4hero10StepInKind(heroManager, curNum, location, location, 1, individHero, 4);
		// that last argument is very strange, it's only set to 3 for the main player and 4 for any other players who join in
	}
	
	return;
}

// first arg = pointer to allocated memory (816 bytes)
// second arg = dereferenced individHero pointer
// third arg = individHero pointer + 4
// fourth arg = controller id (crashes when higher than 4 or when two players are allocated to the same controller)
// fifth arg = first vector2 array
// sixth arg = second vector2 array
// seventh arg = whatever the fuck (character number? ability id?)
//		whatever it is, it doesn't like being anything other than 1, because it crashes otherwise
// eighth arg = individhero
// 0x4 of the individHero struct is the character id
// 3 is kirby, 4 is meta, 5 is dedede, and 6 is dee

in rtdl gameplay, 1.0f is equal to the length of one collision block
if kirby in amazing mirror travels 1 pixel per frame when walking and one collision block in Amazing Mirror is most likely 16 pixels wide, then pixel to rtdlunit rate should be 1/16f

am walking velocity: 1/16f
am run velocity:	2/16f
am starting jump velocity: 4/16f

param common + 0x90 = max fall velo
param common + 0x94 = fall accel
param common + 0x74 = decelh limit
param common + 0x84 = accelh limit
param common + 0x158 = start jump velocity

param common + 0x30 - walk velocity
param common + 0x3c - run velocity